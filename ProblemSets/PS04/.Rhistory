xaringan:::inf_mr()
price_df
summary(ols_1a)
tidy(ols_1d)
tidy(ols_1a)
summary(ols_1a)
summary(ols_1d)
?waldtest()
xaringan:::inf_mr()
xaringan:::inf_mr()
example_df <- tibble(x = rnorm(100), y = x + rnorm(100))
est_model <- lm(y ~ x + lag(x) + lag(x,2), data = example_df)
est_model
waldtest(est_model, c("lag(x)", "lag(x,2)"), test = F)
est_model
est_model <- lm(y ~ x + lag(x) + lag(x, 2), data = example_df)
# J
waldtest(est_model, c("lag(x)", "lag(x, 2)"), test = F)
est_model <- lm(y ~ x + lag(x) + lag(x,2), data = example_df)
# J
waldtest(est_model, c("lag(x)", "lag(x,2)"), test = "F")
est_model <- lm(y ~ x + lag(x) + lag(x, 2), data = example_df)
# J
waldtest(est_model, c("lag(x)", "lag(x,2)"), test = "F")
est_model <- lm(y ~ x + lag(x) + lag(x, 2), data = example_df)
# J
waldtest(est_model, c("lag(x)", "lag(x, 2)"), test = "F")
est_model <- lm(y ~ x + lag(x) + lag(x,2), data = example_df)
# J
waldtest(est_model, c("lag(x)", "lag(x,2)"), test = "F")
est_model <- lm(y ~ x + lag(x) + lag(x,2), data = example_df)
# J
waldtest(est_model, c("lag(x)", "lag(x, 2)"), test = "F")
est_model <- lm(y ~ x + lag(x) + lag(x,2), data = example_df)
# J
waldtest(est_model, c("lag(x)", "lag(x, 2)"), test = "F")
lm(price_gas ~ price_oil + lag(price_oil) + lag(price_oil,2), price_df) %>% summary
lm(price_gas ~ lag(price_gas) + price_oil + lag(price_oil) + lag(price_oil,2), price_df) %>% summary
tidy(ols_1d)
tidy(ols_1i)
?tidy
tidy.lm
tidy(ols_1i)
tidy(ols_1i, digits = 5)
price_df
tidy(bg_2g)
waldtest(bg_2g, c("lag(e_1i, 1)", "lag(2_1i, 2)"))
waldtest(bg_2g, c("lag(e_1i, 1)", "lag(2_1i, 2)"))
waldtest(bg_2g, c("lag(e_1i, 1)", "lag(e_1i, 2)"))
price_df
names(price_df) %>% extract(1:7)
names(price_df) %>% magrittr::extract(1:7)
xaringan:::inf_mr()
library(pacman)
p_load(tidyverse, broom, kable, kableExtra, magrittr)
# Set a seed (so your results stay the same)
set.seed(123)
# Generate the initial number, (this will be v[1])
v <- rnorm(1, mean = 0, sd = 1)
# For loop to create the random walk
for (t in 2:30) {
# Create the 'next' observation
v[t] <- v[t-1] + rnorm(1)
}
v
v
w
# Generate the initial number, (this will be v[1])
w <- rnorm(1, mean = 0, sd = 1)
# For loop to create the random walk
for (t in 2:30) {
# Create the 'next' observation
w[t] <- w[t-1] + rnorm(1)
}
v
w
lm(v ~ x)
lm(v ~ w)
lm(v ~ w) %>% summary
# Set a seed (so your results stay the same)
set.seed(123)
# Generate the initial number, (this will be v[1])
v <- rnorm(1, mean = 0, sd = 1)
# For loop to create the random walk
for (t in 2:50) {
# Create the 'next' observation
v[t] <- v[t-1] + rnorm(1)
}
# Set a seed (so your results stay the same)
set.seed(123)
# Generate the initial number, (this will be v[1])
w <- rnorm(1, mean = 0, sd = 1)
# For loop to create the random walk
for (t in 2:50) {
# Create the 'next' observation
w[t] <- w[t-1] + rnorm(1)
}
# Set a seed (so your results stay the same)
set.seed(123)
# Generate the initial number, (this will be v[1])
v <- rnorm(1, mean = 0, sd = 1)
# For loop to create the random walk
for (t in 2:50) {
# Create the 'next' observation
v[t] <- v[t-1] + rnorm(1)
}
# Generate the initial number, (this will be v[1])
w <- rnorm(1, mean = 0, sd = 1)
# For loop to create the random walk
for (t in 2:50) {
# Create the 'next' observation
w[t] <- w[t-1] + rnorm(1)
}
v
w
lm(v ~ w)
lm(v ~ w) %>% summary
# Set a seed (so your results stay the same)
set.seed(1234)
# Generate the initial number, (this will be v[1])
v <- rnorm(1, mean = 0, sd = 1)
# For loop to create the random walk
for (t in 2:50) {
# Create the 'next' observation
v[t] <- v[t-1] + rnorm(1)
}
# Generate the initial number, (this will be v[1])
w <- rnorm(1, mean = 0, sd = 1)
# For loop to create the random walk
for (t in 2:50) {
# Create the 'next' observation
w[t] <- w[t-1] + rnorm(1)
}
lm(v ~ w) %>% summary
# Set a seed (so your results stay the same)
set.seed(1234)
# Generate the initial number, (this will be v[1])
v <- rnorm(1, mean = 0, sd = 1)
# For loop to create the random walk
for (t in 2:50) {
# Create the 'next' observation
v[t] <- v[t-1] + rnorm(1)
}
# Generate the initial number, (this will be v[1])
w <- rnorm(1, mean = 0, sd = 1)
# For loop to create the random walk
for (t in 2:50) {
# Create the 'next' observation
w[t] <- w[t-1] + rnorm(1)
}
lm(v ~ w)
lm(v ~ w) %>% summary()
lm(v ~ w + 1:50) %>% summary()
lm(v ~ w + I(1:50)) %>% summary()
lm(diff(v) ~ diff(w)) %>% summary()
rubin_df <- data.frame(
i = 1:4,
trt = rep(c(0,1), each = 2),
y1 = 3 + c(12, 7, 5, 6),
y0 = 3 + c(8, 5, 1, 4)
)
rubin_df
rubin_df <- data.frame(
i = 1:4,
trt = rep(c(0,1), each = 2),
y1 = 1 + 2 * c(12, 7, 5, 6),
y0 = 1 + 2 * c(8, 5, 1, 4)
)
rubin_df
xaringan:::inf_mr()
xaringan:::inf_mr()
